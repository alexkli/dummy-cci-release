#
# ADOBE CONFIDENTIAL
# __________________
#
# Copyright 2019 Adobe Systems Incorporated
# All Rights Reserved.
#
# NOTICE:  All information contained herein is, and remains
# the property of Adobe Systems Incorporated and its suppliers,
# if any.  The intellectual and technical concepts contained
# herein are proprietary to Adobe Systems Incorporated and its
# suppliers and are protected by trade secret or copyright law.
# Dissemination of this information or reproduction of this material
# is strictly forbidden unless prior written permission is obtained
# from Adobe Systems Incorporated.
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#

ssh_keys: &ssh_keys
  add_ssh_keys:
    fingerprints:
      - "98:db:59:8c:95:ec:31:3b:ad:d4:8e:a7:c5:6d:57:8f"

test_results_build: &test_results_build
  # Unit-Test-reports for modules without action folder
  store_test_results:
    path: build
test_results_ac_build: &test_results_ac_build
  # Test-reports for modules with action folder
  store_test_results:
    path: action/build
test_logs_ac_bld: &test_logs_ac_bld
  # Test-logs for modules with action folder
  store_artifacts:
    path: action/build
    destination: build
test_logs_bld: &test_logs_bld
  # Test-logs for modules without action folder
  store_artifacts:
    path: build
    destination: build  
test_logs_ac_nui: &test_logs_ac_nui
  # Test-logs for modules with action folder for image comparision
  store_artifacts:
    path: action/.nui
    destination: .nui
coverage: &coverage
  # Coverage-report
  store_artifacts:
    path: coverage
    destination: coverage

version: 2

commands:
  artifactory_login: &artifactory_login
    run:
      name: Artifactory credentials setup
      command: |
        curl --fail -s -u${ARTIFACTORY_USER}:${ARTIFACTORY_TOKEN} https://artifactory.corp.adobe.com/artifactory/api/npm/npm-nui-release-local/auth/nui >> ~/.npmrc
        # this was added only for core repo
        curl --fail -s -u${ARTIFACTORY_USER}:${ARTIFACTORY_TOKEN} https://artifactory.corp.adobe.com/artifactory/api/npm/npm-aem-desktop-release-local/auth/aem-desktop >> ~/.npmrc

jobs:
  build_runtime:
    working_directory: ~/repo
    docker:
      - image: circleci/node:12.0.0
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - *ssh_keys
      - *artifactory_login
      - run:
          name: Creating Docker Runtime
          command: |
            mkdir -p ~/cache/docker_runtime
            if [ -d "docker" ] || [  -d "runtime" ]; then
              if [ -d "docker" ]; then
                cd ~/repo/docker
              elif [ -d "runtime" ]; then
                cd ~/repo/runtime
              fi
              if [ -f "download-artifacts" ]; then
                  export ARTIFACTORY_APIKEY=$ARTIFACTORY_TOKEN
                  ./download-artifacts
              fi
              docker login docker-project-nui-snapshot.dr.corp.adobe.com -u $ARTIFACTORY_USER -p $ARTIFACTORY_TOKEN
              export DOCKER_REGISTRY=docker-senseiwins-release.dr-uw2.adobeitc.com/
              if [ -f "docker-compose.yml" ]; then
                docker-compose build runtime
                docker image ls
                imgName=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep "$CIRCLE_PROJECT_REPONAME")
                echo $imgName
                docker save -o ~/cache/docker_runtime/$CIRCLE_PROJECT_REPONAME.tar $imgName
                ls ~/cache/docker_runtime
              fi
            else
              cd ~/repo
              docker login docker-senseiwins-release.dr-uw2.adobeitc.com -u $ARTIFACTORY_UW2_USER -p $ARTIFACTORY_UW2_TOKEN
            fi
      - persist_to_workspace:
          root: /home/circleci/cache/
          paths:
            - docker_runtime

  build:
    working_directory: ~/repo
    machine:
        enabled: true
        docker_layer_caching: true
    steps:
      - checkout:
          path: ~/repo
      - *artifactory_login
      - attach_workspace:
          at: cache
      - run:
          name: Credentials and setup
          command: |
            docker login -u $ARTIFACTORY_UW2_USER -p $ARTIFACTORY_UW2_TOKEN docker-senseiwins-release.dr-uw2.adobeitc.com
            docker login docker-project-nui-snapshot.dr.corp.adobe.com -u $ARTIFACTORY_USER -p $ARTIFACTORY_TOKEN
      - run:
          name: Load Docker Runtime
          command: |
            if [ -d "docker" ] || [  -d "runtime" ]; then
              FILE=cache/docker_runtime/$CIRCLE_PROJECT_REPONAME.tar
              if [ -f $FILE ]; then
                docker load -i $FILE
              fi
            else
              cd ~/repo
              docker login docker-senseiwins-release.dr-uw2.adobeitc.com -u $ARTIFACTORY_UW2_USER -p $ARTIFACTORY_UW2_TOKEN
            fi
      - run:
          name: Run npm tests
          command: |
            cd ~/repo
            if [ -d "action" ]; then
                cd ~/repo/action
            fi
            # circleci user is missing write access to /usr/local/lib/node_modules
            sudo chown -R circleci /usr/local/
            chmod -R u+x+w /usr/local/
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm install v10.16.3
            nvm alias default v10.16.3
            npm install -g @nui/cli              
            npm install              
            npm test
      - *test_results_build
      - *test_results_ac_build
      - *test_logs_ac_bld
      - *test_logs_bld
      - *test_logs_ac_nui
      - *coverage


            
  release:
    docker:
      - image: circleci/node:12.0.0
    steps:
      - checkout
      - *ssh_keys
      - *artifactory_login
      - run:
          name: Releasing module - npm publish and create git tags
          command: |
            echo "Getting ready to release!!"
            currentVersion="$(git describe --tags)";
            cd ~
            git clone git@git.corp.adobe.com:nui/circleci.git
            cd circleci
            git checkout test-releaserc-1
            git pull
            ls
            dest="/home/circleci/project/"
            cd ~/project/
            # check for "action" folder
            if [ -d "action" ]; then
                cd action
                dest="/home/circleci/project/action/"
            fi
            cp ~/circleci/.releaserc.json $dest/
            sleep 2
            git status
            npm install
            npm install --no-save semantic-release
            npm install --no-save conventional-changelog-eslint
            npx semantic-release --debug
            cat package.json
            newVersion="$(git describe --tags)"
            git config --global user.email "nuicid@adobe.com"
            git config --global user.name "nuicid"
            git status
            git add package.json
            git commit -m "no-release: [ci skip] update version in package json"
            git push origin master
            echo "currentVersion -> $currentVersion & newVersion -> $newVersion"
            versionChanged=true
            if [ "$currentVersion" = "$newVersion" ]; then
              versionChanged=false
            fi
            # pass along VERSION_CHANGED to next job
            mkdir -p ~/tmpDir
            echo "export VERSION_CHANGED=$versionChanged" >> ~/tmpDir/env-vars
            cat ~/tmpDir/env-vars
            #TODO update README.md
            # find readme to update
            if [ "$versionChanged" = "true" ]; then
              cd ~/project
              newVersion="${newVersion:1}"
              git stash save
              if [ -e README.md ]; then
                  readme=README.md
              fi
              # update and commit readme badge
              if [ -n "$readme" ]; then
                  echo "updating version badge in $readme";
                  sed -i -E \
                      -e "s|(img.shields.io/badge/.*)-([0-9]+\.[0-9]+\.[0-9]+)-blue\.svg|\1-${newVersion}-blue.svg|" \
                      -e "s|(img.shields.io/badge/.*)-([0-9]+\.[0-9]+\.[0-9]+)\.tgz|\1-${newVersion}.tgz|" \
                      "$readme" && echo "updated Readme.md"
                  git add "$readme"
                  git status
                  git diff
                  git commit -m "[ci skip] badge in README.md to $newVersion"
                  git push origin master
              fi
              ### preDependentVersionUpdate
              cd ~
              mkdir appLatest && cd appLatest && mkdir bridgeDir && cd bridgeDir
              #~/appLatest/bridgeDir/app
              git clone git@git.corp.adobe.com:nui/app.git
              cd app
              # TODO change-this
              git checkout testing-cci-release
              git branch
              npm install
              #~/ci-dependency-it
              cd ~
              git clone git@git.corp.adobe.com:nui/ci-dependency-it.git
              cd ci-dependency-it
              # TODO change-this
              git checkout update-packagejson
              git branch
              npm install
              node ~/ci-dependency-it/preDependentVersionUpdate-app.js "@nui/$CIRCLE_PROJECT_REPONAME" "/home/circleci/" "project/"
            fi
      - persist_to_workspace:
          root: ~/tmpDir
          paths:
            - env-vars

  dependent-version-update:
    docker:
      - image: circleci/node:12.16.1
    steps:
      - checkout
      - *ssh_keys
      - *artifactory_login
      - attach_workspace:
          at: tmpDir
      - run: cat tmpDir/env-vars >> $BASH_ENV
      - run:
          name: Create PR for dependent repos to update version
          command: |
            #TODO if no-release
            echo "VERSION_CHANGED -> $VERSION_CHANGED"
            if [ "$VERSION_CHANGED" = "true" ]; then
              cd ~
              git clone git@git.corp.adobe.com:nui/circleci.git
              cd circleci
              git checkout test-releaserc-1
              git pull
              ls
              git status
              cd ~
              mkdir appLatest && cd appLatest && mkdir bridgeDir && cd bridgeDir
              #~/appLatest/bridgeDir/app
              git clone git@git.corp.adobe.com:nui/app.git
              cd app
              # TODO change-this
              git checkout testing-cci-release
              git branch
              npm install
              #~/ci-dependency-it
              cd ~
              git clone git@git.corp.adobe.com:nui/ci-dependency-it.git
              cd ci-dependency-it
              # TODO change-this
              git checkout update-packagejson
              git branch
              npm install
              node ~/ci-dependency-it/release-app.js "@nui/$CIRCLE_PROJECT_REPONAME" "/home/circleci/" "project/"
            fi  
            #cd ~
            #git clone git@git.corp.adobe.com:nui/infra.git
            #~/infra/scripts/nui-release.sh
          

  validate_config:
    working_directory: ~/validate
    docker:
      - image: circleci/node:12.0.0
    steps:
      - checkout:
          path: ~/validate/repo
      - run:
          name: compare with central cci config
          command: |
            cd ~/validate
            git clone git@git.corp.adobe.com:nui/circleci.git
            # git clone https://$GITHUB_TOKEN@git.corp.adobe.com/circleci.git
            cd circleci
            git checkout $CIRCLE_BRANCH
            git branch
            #comparing ~/validate/repo/.circleci/config.yml to ~/validate/circleci/config.yml
            cmp -s ~/validate/repo/.circleci/config.yml ~/validate/circleci/config.yml || { echo 'circleci/config.yml not in sync'; exit 1; }
            
# validate_config job currently not used
workflows:
    version: 2
    build:
        jobs:
        - build_runtime:
            context: nui
        - build:
            context: nui
        - release:
            requires:
              - build_runtime
              - build
            filters:
              branches:
                only: master
            context: nui
        - hold-dependent-version-update:
            type: approval # requires that an in-app button be clicked by an appropriate member of the project to continue.
            requires:
              - release
        - dependent-version-update:
            requires:
              - hold-dependent-version-update
            context: nui
  #        - validate_config:
  #            context: nui